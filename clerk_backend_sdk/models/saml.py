# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

    The version of the OpenAPI document: v1
    Contact: support@clerk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, Optional
from clerk_backend_sdk.models.oauth_error import OauthError
from typing import Optional, Set
from typing_extensions import Self

class SAML(BaseModel):
    """
    SAML
    """ # noqa: E501
    status: StrictStr
    strategy: StrictStr
    external_verification_redirect_url: Optional[StrictStr]
    error: Optional[OauthError] = None
    expire_at: StrictInt
    attempts: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["status", "strategy", "external_verification_redirect_url", "error", "expire_at", "attempts"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['unverified', 'verified', 'failed', 'expired', 'transferable']):
            raise ValueError("must be one of enum values ('unverified', 'verified', 'failed', 'expired', 'transferable')")
        return value

    @field_validator('strategy')
    def strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['saml']):
            raise ValueError("must be one of enum values ('saml')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SAML from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # set to None if external_verification_redirect_url (nullable) is None
        # and model_fields_set contains the field
        if self.external_verification_redirect_url is None and "external_verification_redirect_url" in self.model_fields_set:
            _dict['external_verification_redirect_url'] = None

        # set to None if error (nullable) is None
        # and model_fields_set contains the field
        if self.error is None and "error" in self.model_fields_set:
            _dict['error'] = None

        # set to None if attempts (nullable) is None
        # and model_fields_set contains the field
        if self.attempts is None and "attempts" in self.model_fields_set:
            _dict['attempts'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SAML from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "strategy": obj.get("strategy"),
            "external_verification_redirect_url": obj.get("external_verification_redirect_url"),
            "error": OauthError.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "expire_at": obj.get("expire_at"),
            "attempts": obj.get("attempts")
        })
        return _obj


