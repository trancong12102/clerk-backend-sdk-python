# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

    The version of the OpenAPI document: v1
    Contact: support@clerk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from clerk_backend_sdk.models.c_name_target import CNameTarget
from typing import Optional, Set
from typing_extensions import Self

class Domain(BaseModel):
    """
    Domain
    """ # noqa: E501
    object: StrictStr
    id: StrictStr
    name: StrictStr
    is_satellite: StrictBool
    frontend_api_url: StrictStr
    accounts_portal_url: Optional[StrictStr] = Field(default=None, description="Null for satellite domains. ")
    proxy_url: Optional[StrictStr] = None
    development_origin: StrictStr
    cname_targets: Optional[List[CNameTarget]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["object", "id", "name", "is_satellite", "frontend_api_url", "accounts_portal_url", "proxy_url", "development_origin", "cname_targets"]

    @field_validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['domain']):
            raise ValueError("must be one of enum values ('domain')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Domain from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cname_targets (list)
        _items = []
        if self.cname_targets:
            for _item_cname_targets in self.cname_targets:
                if _item_cname_targets:
                    _items.append(_item_cname_targets.to_dict())
            _dict['cname_targets'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if accounts_portal_url (nullable) is None
        # and model_fields_set contains the field
        if self.accounts_portal_url is None and "accounts_portal_url" in self.model_fields_set:
            _dict['accounts_portal_url'] = None

        # set to None if proxy_url (nullable) is None
        # and model_fields_set contains the field
        if self.proxy_url is None and "proxy_url" in self.model_fields_set:
            _dict['proxy_url'] = None

        # set to None if cname_targets (nullable) is None
        # and model_fields_set contains the field
        if self.cname_targets is None and "cname_targets" in self.model_fields_set:
            _dict['cname_targets'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Domain from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "object": obj.get("object"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "is_satellite": obj.get("is_satellite"),
            "frontend_api_url": obj.get("frontend_api_url"),
            "accounts_portal_url": obj.get("accounts_portal_url"),
            "proxy_url": obj.get("proxy_url"),
            "development_origin": obj.get("development_origin"),
            "cname_targets": [CNameTarget.from_dict(_item) for _item in obj["cname_targets"]] if obj.get("cname_targets") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


