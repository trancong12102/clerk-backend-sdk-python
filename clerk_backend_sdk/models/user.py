# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

    The version of the OpenAPI document: v1
    Contact: support@clerk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from clerk_backend_sdk.models.email_address import EmailAddress
from clerk_backend_sdk.models.phone_number import PhoneNumber
from clerk_backend_sdk.models.saml_account import SAMLAccount
from clerk_backend_sdk.models.schemas_passkey import SchemasPasskey
from clerk_backend_sdk.models.web3_wallet import Web3Wallet
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    User
    """ # noqa: E501
    id: Optional[StrictStr] = None
    object: Optional[StrictStr] = Field(default=None, description="String representing the object's type. Objects of the same type share the same value. ")
    external_id: Optional[StrictStr] = None
    primary_email_address_id: Optional[StrictStr] = None
    primary_phone_number_id: Optional[StrictStr] = None
    primary_web3_wallet_id: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = None
    profile_image_url: Optional[StrictStr] = None
    image_url: Optional[StrictStr] = None
    has_image: Optional[StrictBool] = None
    public_metadata: Optional[Dict[str, Any]] = None
    private_metadata: Optional[Dict[str, Any]] = None
    unsafe_metadata: Optional[Dict[str, Any]] = None
    email_addresses: Optional[List[EmailAddress]] = None
    phone_numbers: Optional[List[PhoneNumber]] = None
    web3_wallets: Optional[List[Web3Wallet]] = None
    passkeys: Optional[List[SchemasPasskey]] = None
    password_enabled: Optional[StrictBool] = None
    two_factor_enabled: Optional[StrictBool] = None
    totp_enabled: Optional[StrictBool] = None
    backup_code_enabled: Optional[StrictBool] = None
    mfa_enabled_at: Optional[StrictInt] = Field(default=None, description="Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled. ")
    mfa_disabled_at: Optional[StrictInt] = Field(default=None, description="Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again. ")
    external_accounts: Optional[List[Dict[str, Any]]] = None
    saml_accounts: Optional[List[SAMLAccount]] = None
    last_sign_in_at: Optional[StrictInt] = Field(default=None, description="Unix timestamp of last sign-in. ")
    banned: Optional[StrictBool] = Field(default=None, description="Flag to denote whether user is banned or not. ")
    locked: Optional[StrictBool] = Field(default=None, description="Flag to denote whether user is currently locked, i.e. restricted from signing in or not. ")
    lockout_expires_in_seconds: Optional[StrictInt] = Field(default=None, description="The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires. ")
    verification_attempts_remaining: Optional[StrictInt] = Field(default=None, description="The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining. ")
    updated_at: Optional[StrictInt] = Field(default=None, description="Unix timestamp of last update. ")
    created_at: Optional[StrictInt] = Field(default=None, description="Unix timestamp of creation. ")
    delete_self_enabled: Optional[StrictBool] = Field(default=None, description="If enabled, user can delete themselves via FAPI. ")
    create_organization_enabled: Optional[StrictBool] = Field(default=None, description="If enabled, user can create organizations via FAPI. ")
    create_organizations_limit: Optional[StrictInt] = Field(default=None, description="The maximum number of organizations the user can create. 0 means unlimited. ")
    last_active_at: Optional[StrictInt] = Field(default=None, description="Unix timestamp of the latest session activity, with day precision. ")
    __properties: ClassVar[List[str]] = ["id", "object", "external_id", "primary_email_address_id", "primary_phone_number_id", "primary_web3_wallet_id", "username", "first_name", "last_name", "profile_image_url", "image_url", "has_image", "public_metadata", "private_metadata", "unsafe_metadata", "email_addresses", "phone_numbers", "web3_wallets", "passkeys", "password_enabled", "two_factor_enabled", "totp_enabled", "backup_code_enabled", "mfa_enabled_at", "mfa_disabled_at", "external_accounts", "saml_accounts", "last_sign_in_at", "banned", "locked", "lockout_expires_in_seconds", "verification_attempts_remaining", "updated_at", "created_at", "delete_self_enabled", "create_organization_enabled", "create_organizations_limit", "last_active_at"]

    @field_validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['user']):
            raise ValueError("must be one of enum values ('user')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in email_addresses (list)
        _items = []
        if self.email_addresses:
            for _item_email_addresses in self.email_addresses:
                if _item_email_addresses:
                    _items.append(_item_email_addresses.to_dict())
            _dict['email_addresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phone_numbers (list)
        _items = []
        if self.phone_numbers:
            for _item_phone_numbers in self.phone_numbers:
                if _item_phone_numbers:
                    _items.append(_item_phone_numbers.to_dict())
            _dict['phone_numbers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in web3_wallets (list)
        _items = []
        if self.web3_wallets:
            for _item_web3_wallets in self.web3_wallets:
                if _item_web3_wallets:
                    _items.append(_item_web3_wallets.to_dict())
            _dict['web3_wallets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in passkeys (list)
        _items = []
        if self.passkeys:
            for _item_passkeys in self.passkeys:
                if _item_passkeys:
                    _items.append(_item_passkeys.to_dict())
            _dict['passkeys'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in saml_accounts (list)
        _items = []
        if self.saml_accounts:
            for _item_saml_accounts in self.saml_accounts:
                if _item_saml_accounts:
                    _items.append(_item_saml_accounts.to_dict())
            _dict['saml_accounts'] = _items
        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['external_id'] = None

        # set to None if primary_email_address_id (nullable) is None
        # and model_fields_set contains the field
        if self.primary_email_address_id is None and "primary_email_address_id" in self.model_fields_set:
            _dict['primary_email_address_id'] = None

        # set to None if primary_phone_number_id (nullable) is None
        # and model_fields_set contains the field
        if self.primary_phone_number_id is None and "primary_phone_number_id" in self.model_fields_set:
            _dict['primary_phone_number_id'] = None

        # set to None if primary_web3_wallet_id (nullable) is None
        # and model_fields_set contains the field
        if self.primary_web3_wallet_id is None and "primary_web3_wallet_id" in self.model_fields_set:
            _dict['primary_web3_wallet_id'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['first_name'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['last_name'] = None

        # set to None if private_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.private_metadata is None and "private_metadata" in self.model_fields_set:
            _dict['private_metadata'] = None

        # set to None if mfa_enabled_at (nullable) is None
        # and model_fields_set contains the field
        if self.mfa_enabled_at is None and "mfa_enabled_at" in self.model_fields_set:
            _dict['mfa_enabled_at'] = None

        # set to None if mfa_disabled_at (nullable) is None
        # and model_fields_set contains the field
        if self.mfa_disabled_at is None and "mfa_disabled_at" in self.model_fields_set:
            _dict['mfa_disabled_at'] = None

        # set to None if last_sign_in_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_sign_in_at is None and "last_sign_in_at" in self.model_fields_set:
            _dict['last_sign_in_at'] = None

        # set to None if lockout_expires_in_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.lockout_expires_in_seconds is None and "lockout_expires_in_seconds" in self.model_fields_set:
            _dict['lockout_expires_in_seconds'] = None

        # set to None if verification_attempts_remaining (nullable) is None
        # and model_fields_set contains the field
        if self.verification_attempts_remaining is None and "verification_attempts_remaining" in self.model_fields_set:
            _dict['verification_attempts_remaining'] = None

        # set to None if create_organizations_limit (nullable) is None
        # and model_fields_set contains the field
        if self.create_organizations_limit is None and "create_organizations_limit" in self.model_fields_set:
            _dict['create_organizations_limit'] = None

        # set to None if last_active_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_active_at is None and "last_active_at" in self.model_fields_set:
            _dict['last_active_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "object": obj.get("object"),
            "external_id": obj.get("external_id"),
            "primary_email_address_id": obj.get("primary_email_address_id"),
            "primary_phone_number_id": obj.get("primary_phone_number_id"),
            "primary_web3_wallet_id": obj.get("primary_web3_wallet_id"),
            "username": obj.get("username"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "profile_image_url": obj.get("profile_image_url"),
            "image_url": obj.get("image_url"),
            "has_image": obj.get("has_image"),
            "public_metadata": obj.get("public_metadata"),
            "private_metadata": obj.get("private_metadata"),
            "unsafe_metadata": obj.get("unsafe_metadata"),
            "email_addresses": [EmailAddress.from_dict(_item) for _item in obj["email_addresses"]] if obj.get("email_addresses") is not None else None,
            "phone_numbers": [PhoneNumber.from_dict(_item) for _item in obj["phone_numbers"]] if obj.get("phone_numbers") is not None else None,
            "web3_wallets": [Web3Wallet.from_dict(_item) for _item in obj["web3_wallets"]] if obj.get("web3_wallets") is not None else None,
            "passkeys": [SchemasPasskey.from_dict(_item) for _item in obj["passkeys"]] if obj.get("passkeys") is not None else None,
            "password_enabled": obj.get("password_enabled"),
            "two_factor_enabled": obj.get("two_factor_enabled"),
            "totp_enabled": obj.get("totp_enabled"),
            "backup_code_enabled": obj.get("backup_code_enabled"),
            "mfa_enabled_at": obj.get("mfa_enabled_at"),
            "mfa_disabled_at": obj.get("mfa_disabled_at"),
            "external_accounts": obj.get("external_accounts"),
            "saml_accounts": [SAMLAccount.from_dict(_item) for _item in obj["saml_accounts"]] if obj.get("saml_accounts") is not None else None,
            "last_sign_in_at": obj.get("last_sign_in_at"),
            "banned": obj.get("banned"),
            "locked": obj.get("locked"),
            "lockout_expires_in_seconds": obj.get("lockout_expires_in_seconds"),
            "verification_attempts_remaining": obj.get("verification_attempts_remaining"),
            "updated_at": obj.get("updated_at"),
            "created_at": obj.get("created_at"),
            "delete_self_enabled": obj.get("delete_self_enabled"),
            "create_organization_enabled": obj.get("create_organization_enabled"),
            "create_organizations_limit": obj.get("create_organizations_limit"),
            "last_active_at": obj.get("last_active_at")
        })
        return _obj


