# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

    The version of the OpenAPI document: v1
    Contact: support@clerk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateInvitationRequest(BaseModel):
    """
    CreateInvitationRequest
    """ # noqa: E501
    email_address: StrictStr = Field(description="The email address the invitation will be sent to")
    public_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Metadata that will be attached to the newly created invitation. The value of this property should be a well-formed JSON object. Once the user accepts the invitation and signs up, these metadata will end up in the user's public metadata.")
    redirect_url: Optional[StrictStr] = Field(default=None, description="Optional URL which specifies where to redirect the user once they click the invitation link. This is only required if you have implemented a [custom flow](https://clerk.com/docs/authentication/invitations#custom-flow) and you're not using Clerk Hosted Pages or Clerk Components.")
    notify: Optional[StrictBool] = Field(default=True, description="Optional flag which denotes whether an email invitation should be sent to the given email address. Defaults to true.")
    ignore_existing: Optional[StrictBool] = Field(default=False, description="Whether an invitation should be created if there is already an existing invitation for this email address, or it's claimed by another user.")
    __properties: ClassVar[List[str]] = ["email_address", "public_metadata", "redirect_url", "notify", "ignore_existing"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateInvitationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if notify (nullable) is None
        # and model_fields_set contains the field
        if self.notify is None and "notify" in self.model_fields_set:
            _dict['notify'] = None

        # set to None if ignore_existing (nullable) is None
        # and model_fields_set contains the field
        if self.ignore_existing is None and "ignore_existing" in self.model_fields_set:
            _dict['ignore_existing'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateInvitationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email_address": obj.get("email_address"),
            "public_metadata": obj.get("public_metadata"),
            "redirect_url": obj.get("redirect_url"),
            "notify": obj.get("notify") if obj.get("notify") is not None else True,
            "ignore_existing": obj.get("ignore_existing") if obj.get("ignore_existing") is not None else False
        })
        return _obj


