# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

    The version of the OpenAPI document: v1
    Contact: support@clerk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, Optional
from clerk_backend_sdk.models.create_saml_connection_request_attribute_mapping import CreateSAMLConnectionRequestAttributeMapping
from typing import Optional, Set
from typing_extensions import Self

class CreateSAMLConnectionRequest(BaseModel):
    """
    CreateSAMLConnectionRequest
    """ # noqa: E501
    name: StrictStr = Field(description="The name to use as a label for this SAML Connection")
    domain: StrictStr = Field(description="The domain of your organization. Sign in flows using an email with this domain, will use this SAML Connection.")
    provider: StrictStr = Field(description="The IdP provider of the connection.")
    idp_entity_id: Optional[StrictStr] = Field(default=None, description="The Entity ID as provided by the IdP")
    idp_sso_url: Optional[StrictStr] = Field(default=None, description="The Single-Sign On URL as provided by the IdP")
    idp_certificate: Optional[StrictStr] = Field(default=None, description="The X.509 certificate as provided by the IdP")
    idp_metadata_url: Optional[StrictStr] = Field(default=None, description="The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties")
    idp_metadata: Optional[StrictStr] = Field(default=None, description="The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties")
    attribute_mapping: Optional[CreateSAMLConnectionRequestAttributeMapping] = None
    __properties: ClassVar[List[str]] = ["name", "domain", "provider", "idp_entity_id", "idp_sso_url", "idp_certificate", "idp_metadata_url", "idp_metadata", "attribute_mapping"]

    @field_validator('provider')
    def provider_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['saml_custom', 'saml_okta', 'saml_google', 'saml_microsoft']):
            raise ValueError("must be one of enum values ('saml_custom', 'saml_okta', 'saml_google', 'saml_microsoft')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateSAMLConnectionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attribute_mapping
        if self.attribute_mapping:
            _dict['attribute_mapping'] = self.attribute_mapping.to_dict()
        # set to None if idp_entity_id (nullable) is None
        # and model_fields_set contains the field
        if self.idp_entity_id is None and "idp_entity_id" in self.model_fields_set:
            _dict['idp_entity_id'] = None

        # set to None if idp_sso_url (nullable) is None
        # and model_fields_set contains the field
        if self.idp_sso_url is None and "idp_sso_url" in self.model_fields_set:
            _dict['idp_sso_url'] = None

        # set to None if idp_certificate (nullable) is None
        # and model_fields_set contains the field
        if self.idp_certificate is None and "idp_certificate" in self.model_fields_set:
            _dict['idp_certificate'] = None

        # set to None if idp_metadata_url (nullable) is None
        # and model_fields_set contains the field
        if self.idp_metadata_url is None and "idp_metadata_url" in self.model_fields_set:
            _dict['idp_metadata_url'] = None

        # set to None if idp_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.idp_metadata is None and "idp_metadata" in self.model_fields_set:
            _dict['idp_metadata'] = None

        # set to None if attribute_mapping (nullable) is None
        # and model_fields_set contains the field
        if self.attribute_mapping is None and "attribute_mapping" in self.model_fields_set:
            _dict['attribute_mapping'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateSAMLConnectionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "domain": obj.get("domain"),
            "provider": obj.get("provider"),
            "idp_entity_id": obj.get("idp_entity_id"),
            "idp_sso_url": obj.get("idp_sso_url"),
            "idp_certificate": obj.get("idp_certificate"),
            "idp_metadata_url": obj.get("idp_metadata_url"),
            "idp_metadata": obj.get("idp_metadata"),
            "attribute_mapping": CreateSAMLConnectionRequestAttributeMapping.from_dict(obj["attribute_mapping"]) if obj.get("attribute_mapping") is not None else None
        })
        return _obj


