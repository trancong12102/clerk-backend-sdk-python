# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

    The version of the OpenAPI document: v1
    Contact: support@clerk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreatePhoneNumberRequest(BaseModel):
    """
    CreatePhoneNumberRequest
    """ # noqa: E501
    user_id: Optional[StrictStr] = Field(default=None, description="The ID representing the user")
    phone_number: Optional[StrictStr] = Field(default=None, description="The new phone number. Must adhere to the E.164 standard for phone number format.")
    verified: Optional[StrictBool] = Field(default=None, description="When created, the phone number will be marked as verified.")
    primary: Optional[StrictBool] = Field(default=None, description="Create this phone number as the primary phone number for the user. Default: false, unless it is the first phone number.")
    reserved_for_second_factor: Optional[StrictBool] = Field(default=None, description="Create this phone number as reserved for multi-factor authentication. The phone number must also be verified. If there are no other reserved second factors, the phone number will be set as the default second factor.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["user_id", "phone_number", "verified", "primary", "reserved_for_second_factor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePhoneNumberRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if verified (nullable) is None
        # and model_fields_set contains the field
        if self.verified is None and "verified" in self.model_fields_set:
            _dict['verified'] = None

        # set to None if primary (nullable) is None
        # and model_fields_set contains the field
        if self.primary is None and "primary" in self.model_fields_set:
            _dict['primary'] = None

        # set to None if reserved_for_second_factor (nullable) is None
        # and model_fields_set contains the field
        if self.reserved_for_second_factor is None and "reserved_for_second_factor" in self.model_fields_set:
            _dict['reserved_for_second_factor'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePhoneNumberRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_id": obj.get("user_id"),
            "phone_number": obj.get("phone_number"),
            "verified": obj.get("verified"),
            "primary": obj.get("primary"),
            "reserved_for_second_factor": obj.get("reserved_for_second_factor")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


