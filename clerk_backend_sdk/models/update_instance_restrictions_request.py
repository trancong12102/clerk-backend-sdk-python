# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

    The version of the OpenAPI document: v1
    Contact: support@clerk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool
from typing import Any, ClassVar, Dict, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateInstanceRestrictionsRequest(BaseModel):
    """
    UpdateInstanceRestrictionsRequest
    """ # noqa: E501
    allowlist: Optional[StrictBool] = None
    blocklist: Optional[StrictBool] = None
    block_email_subaddresses: Optional[StrictBool] = None
    block_disposable_email_domains: Optional[StrictBool] = None
    ignore_dots_for_gmail_addresses: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["allowlist", "blocklist", "block_email_subaddresses", "block_disposable_email_domains", "ignore_dots_for_gmail_addresses"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateInstanceRestrictionsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if allowlist (nullable) is None
        # and model_fields_set contains the field
        if self.allowlist is None and "allowlist" in self.model_fields_set:
            _dict['allowlist'] = None

        # set to None if blocklist (nullable) is None
        # and model_fields_set contains the field
        if self.blocklist is None and "blocklist" in self.model_fields_set:
            _dict['blocklist'] = None

        # set to None if block_email_subaddresses (nullable) is None
        # and model_fields_set contains the field
        if self.block_email_subaddresses is None and "block_email_subaddresses" in self.model_fields_set:
            _dict['block_email_subaddresses'] = None

        # set to None if block_disposable_email_domains (nullable) is None
        # and model_fields_set contains the field
        if self.block_disposable_email_domains is None and "block_disposable_email_domains" in self.model_fields_set:
            _dict['block_disposable_email_domains'] = None

        # set to None if ignore_dots_for_gmail_addresses (nullable) is None
        # and model_fields_set contains the field
        if self.ignore_dots_for_gmail_addresses is None and "ignore_dots_for_gmail_addresses" in self.model_fields_set:
            _dict['ignore_dots_for_gmail_addresses'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateInstanceRestrictionsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowlist": obj.get("allowlist"),
            "blocklist": obj.get("blocklist"),
            "block_email_subaddresses": obj.get("block_email_subaddresses"),
            "block_disposable_email_domains": obj.get("block_disposable_email_domains"),
            "ignore_dots_for_gmail_addresses": obj.get("ignore_dots_for_gmail_addresses")
        })
        return _obj


