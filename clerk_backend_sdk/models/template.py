# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

    The version of the OpenAPI document: v1
    Contact: support@clerk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Template(BaseModel):
    """
    Template
    """ # noqa: E501
    id: Optional[StrictStr] = None
    object: Optional[StrictStr] = Field(default=None, description="String representing the object's type. Objects of the same type share the same value. ")
    instance_id: Optional[StrictStr] = Field(default=None, description="the id of the instance the template belongs to")
    resource_type: Optional[StrictStr] = Field(default=None, description="whether this is a system (default) or user overridden) template")
    template_type: Optional[StrictStr] = Field(default=None, description="whether this is an email or SMS template")
    name: Optional[StrictStr] = Field(default=None, description="user-friendly name of the template")
    slug: Optional[StrictStr] = Field(default=None, description="machine-friendly name of the template")
    position: Optional[StrictInt] = Field(default=None, description="position with the listing of templates")
    can_revert: Optional[StrictBool] = Field(default=None, description="whether this template can be reverted to the corresponding system default")
    can_delete: Optional[StrictBool] = Field(default=None, description="whether this template can be deleted")
    can_toggle: Optional[StrictBool] = Field(default=None, description="whether this template can be enabled or disabled, true only for notification SMS templates")
    subject: Optional[StrictStr] = Field(default=None, description="email subject")
    markup: Optional[StrictStr] = Field(default=None, description="the editor markup used to generate the body of the template")
    body: Optional[StrictStr] = Field(default=None, description="the template body before variable interpolation")
    available_variables: Optional[List[StrictStr]] = Field(default=None, description="list of variables that are available for use in the template body")
    required_variables: Optional[List[StrictStr]] = Field(default=None, description="list of variables that must be contained in the template body")
    from_email_name: Optional[StrictStr] = None
    reply_to_email_name: Optional[StrictStr] = None
    delivered_by_clerk: Optional[StrictBool] = None
    enabled: Optional[StrictBool] = None
    updated_at: Optional[StrictInt] = Field(default=None, description="Unix timestamp of last update. ")
    created_at: Optional[StrictInt] = Field(default=None, description="Unix timestamp of creation. ")
    __properties: ClassVar[List[str]] = ["id", "object", "instance_id", "resource_type", "template_type", "name", "slug", "position", "can_revert", "can_delete", "can_toggle", "subject", "markup", "body", "available_variables", "required_variables", "from_email_name", "reply_to_email_name", "delivered_by_clerk", "enabled", "updated_at", "created_at"]

    @field_validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['template']):
            raise ValueError("must be one of enum values ('template')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Template from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if instance_id (nullable) is None
        # and model_fields_set contains the field
        if self.instance_id is None and "instance_id" in self.model_fields_set:
            _dict['instance_id'] = None

        # set to None if subject (nullable) is None
        # and model_fields_set contains the field
        if self.subject is None and "subject" in self.model_fields_set:
            _dict['subject'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Template from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "object": obj.get("object"),
            "instance_id": obj.get("instance_id"),
            "resource_type": obj.get("resource_type"),
            "template_type": obj.get("template_type"),
            "name": obj.get("name"),
            "slug": obj.get("slug"),
            "position": obj.get("position"),
            "can_revert": obj.get("can_revert"),
            "can_delete": obj.get("can_delete"),
            "can_toggle": obj.get("can_toggle"),
            "subject": obj.get("subject"),
            "markup": obj.get("markup"),
            "body": obj.get("body"),
            "available_variables": obj.get("available_variables"),
            "required_variables": obj.get("required_variables"),
            "from_email_name": obj.get("from_email_name"),
            "reply_to_email_name": obj.get("reply_to_email_name"),
            "delivered_by_clerk": obj.get("delivered_by_clerk"),
            "enabled": obj.get("enabled"),
            "updated_at": obj.get("updated_at"),
            "created_at": obj.get("created_at")
        })
        return _obj


