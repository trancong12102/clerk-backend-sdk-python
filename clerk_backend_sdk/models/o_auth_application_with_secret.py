# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

    The version of the OpenAPI document: v1
    Contact: support@clerk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OAuthApplicationWithSecret(BaseModel):
    """
    OAuthApplicationWithSecret
    """ # noqa: E501
    object: StrictStr
    id: StrictStr
    instance_id: StrictStr
    name: StrictStr
    client_id: StrictStr
    public: StrictBool
    scopes: StrictStr
    callback_url: StrictStr
    authorize_url: StrictStr
    token_fetch_url: StrictStr
    user_info_url: StrictStr
    created_at: StrictInt = Field(description="Unix timestamp of creation. ")
    updated_at: StrictInt = Field(description="Unix timestamp of last update. ")
    client_secret: Optional[StrictStr] = Field(default=None, description="Empty if public client. ")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["object", "id", "instance_id", "name", "client_id", "public", "scopes", "callback_url", "authorize_url", "token_fetch_url", "user_info_url", "created_at", "updated_at", "client_secret"]

    @field_validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['oauth_application']):
            raise ValueError("must be one of enum values ('oauth_application')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OAuthApplicationWithSecret from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OAuthApplicationWithSecret from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "object": obj.get("object"),
            "id": obj.get("id"),
            "instance_id": obj.get("instance_id"),
            "name": obj.get("name"),
            "client_id": obj.get("client_id"),
            "public": obj.get("public"),
            "scopes": obj.get("scopes"),
            "callback_url": obj.get("callback_url"),
            "authorize_url": obj.get("authorize_url"),
            "token_fetch_url": obj.get("token_fetch_url"),
            "user_info_url": obj.get("user_info_url"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "client_secret": obj.get("client_secret")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


