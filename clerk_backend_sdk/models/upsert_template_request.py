# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

    The version of the OpenAPI document: v1
    Contact: support@clerk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpsertTemplateRequest(BaseModel):
    """
    UpsertTemplateRequest
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The user-friendly name of the template")
    subject: Optional[StrictStr] = Field(default=None, description="The email subject. Applicable only to email templates.")
    markup: Optional[StrictStr] = Field(default=None, description="The editor markup used to generate the body of the template")
    body: Optional[StrictStr] = Field(default=None, description="The template body before variable interpolation")
    delivered_by_clerk: Optional[StrictBool] = Field(default=None, description="Whether Clerk should deliver emails or SMS messages based on the current template")
    from_email_name: Optional[StrictStr] = Field(default=None, description="The local part of the From email address that will be used for emails. For example, in the address 'hello@example.com', the local part is 'hello'. Applicable only to email templates.")
    reply_to_email_name: Optional[StrictStr] = Field(default=None, description="The local part of the Reply To email address that will be used for emails. For example, in the address 'hello@example.com', the local part is 'hello'. Applicable only to email templates.")
    __properties: ClassVar[List[str]] = ["name", "subject", "markup", "body", "delivered_by_clerk", "from_email_name", "reply_to_email_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpsertTemplateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if subject (nullable) is None
        # and model_fields_set contains the field
        if self.subject is None and "subject" in self.model_fields_set:
            _dict['subject'] = None

        # set to None if markup (nullable) is None
        # and model_fields_set contains the field
        if self.markup is None and "markup" in self.model_fields_set:
            _dict['markup'] = None

        # set to None if delivered_by_clerk (nullable) is None
        # and model_fields_set contains the field
        if self.delivered_by_clerk is None and "delivered_by_clerk" in self.model_fields_set:
            _dict['delivered_by_clerk'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpsertTemplateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "subject": obj.get("subject"),
            "markup": obj.get("markup"),
            "body": obj.get("body"),
            "delivered_by_clerk": obj.get("delivered_by_clerk"),
            "from_email_name": obj.get("from_email_name"),
            "reply_to_email_name": obj.get("reply_to_email_name")
        })
        return _obj


