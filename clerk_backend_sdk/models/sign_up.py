# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

    The version of the OpenAPI document: v1
    Contact: support@clerk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SignUp(BaseModel):
    """
    SignUp
    """ # noqa: E501
    object: StrictStr
    id: StrictStr
    status: StrictStr
    required_fields: Optional[List[StrictStr]] = None
    optional_fields: Optional[List[StrictStr]] = None
    missing_fields: Optional[List[StrictStr]] = None
    unverified_fields: Optional[List[StrictStr]] = None
    verifications: Optional[Dict[str, Any]] = None
    username: Optional[StrictStr] = None
    email_address: Optional[StrictStr] = None
    phone_number: Optional[StrictStr] = None
    web3_wallet: Optional[StrictStr] = None
    password_enabled: StrictBool
    first_name: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = None
    unsafe_metadata: Optional[Dict[str, Any]] = None
    public_metadata: Optional[Dict[str, Any]] = None
    custom_action: StrictBool
    external_id: Optional[StrictStr] = None
    created_session_id: Optional[StrictStr] = None
    created_user_id: Optional[StrictStr] = None
    abandon_at: StrictInt
    external_account: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["object", "id", "status", "required_fields", "optional_fields", "missing_fields", "unverified_fields", "verifications", "username", "email_address", "phone_number", "web3_wallet", "password_enabled", "first_name", "last_name", "unsafe_metadata", "public_metadata", "custom_action", "external_id", "created_session_id", "created_user_id", "abandon_at", "external_account"]

    @field_validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['sign_up_attempt']):
            raise ValueError("must be one of enum values ('sign_up_attempt')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['missing_requirements', 'complete', 'abandoned']):
            raise ValueError("must be one of enum values ('missing_requirements', 'complete', 'abandoned')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SignUp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if email_address (nullable) is None
        # and model_fields_set contains the field
        if self.email_address is None and "email_address" in self.model_fields_set:
            _dict['email_address'] = None

        # set to None if phone_number (nullable) is None
        # and model_fields_set contains the field
        if self.phone_number is None and "phone_number" in self.model_fields_set:
            _dict['phone_number'] = None

        # set to None if web3_wallet (nullable) is None
        # and model_fields_set contains the field
        if self.web3_wallet is None and "web3_wallet" in self.model_fields_set:
            _dict['web3_wallet'] = None

        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['first_name'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['last_name'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['external_id'] = None

        # set to None if created_session_id (nullable) is None
        # and model_fields_set contains the field
        if self.created_session_id is None and "created_session_id" in self.model_fields_set:
            _dict['created_session_id'] = None

        # set to None if created_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.created_user_id is None and "created_user_id" in self.model_fields_set:
            _dict['created_user_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SignUp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "object": obj.get("object"),
            "id": obj.get("id"),
            "status": obj.get("status"),
            "required_fields": obj.get("required_fields"),
            "optional_fields": obj.get("optional_fields"),
            "missing_fields": obj.get("missing_fields"),
            "unverified_fields": obj.get("unverified_fields"),
            "verifications": obj.get("verifications"),
            "username": obj.get("username"),
            "email_address": obj.get("email_address"),
            "phone_number": obj.get("phone_number"),
            "web3_wallet": obj.get("web3_wallet"),
            "password_enabled": obj.get("password_enabled"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "unsafe_metadata": obj.get("unsafe_metadata"),
            "public_metadata": obj.get("public_metadata"),
            "custom_action": obj.get("custom_action"),
            "external_id": obj.get("external_id"),
            "created_session_id": obj.get("created_session_id"),
            "created_user_id": obj.get("created_user_id"),
            "abandon_at": obj.get("abandon_at"),
            "external_account": obj.get("external_account")
        })
        return _obj


