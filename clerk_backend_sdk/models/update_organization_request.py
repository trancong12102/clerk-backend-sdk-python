# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

    The version of the OpenAPI document: v1
    Contact: support@clerk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateOrganizationRequest(BaseModel):
    """
    UpdateOrganizationRequest
    """ # noqa: E501
    public_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Metadata saved on the organization, that is visible to both your frontend and backend.")
    private_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Metadata saved on the organization that is only visible to your backend.")
    name: Optional[StrictStr] = Field(default=None, description="The new name of the organization")
    slug: Optional[StrictStr] = Field(default=None, description="The new slug of the organization, which needs to be unique in the instance")
    max_allowed_memberships: Optional[StrictInt] = Field(default=None, description="The maximum number of memberships allowed for this organization")
    admin_delete_enabled: Optional[StrictBool] = Field(default=None, description="If true, an admin can delete this organization with the Frontend API.")
    created_at: Optional[StrictStr] = Field(default=None, description="A custom date/time denoting _when_ the organization was created, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).")
    __properties: ClassVar[List[str]] = ["public_metadata", "private_metadata", "name", "slug", "max_allowed_memberships", "admin_delete_enabled", "created_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateOrganizationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if slug (nullable) is None
        # and model_fields_set contains the field
        if self.slug is None and "slug" in self.model_fields_set:
            _dict['slug'] = None

        # set to None if max_allowed_memberships (nullable) is None
        # and model_fields_set contains the field
        if self.max_allowed_memberships is None and "max_allowed_memberships" in self.model_fields_set:
            _dict['max_allowed_memberships'] = None

        # set to None if admin_delete_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.admin_delete_enabled is None and "admin_delete_enabled" in self.model_fields_set:
            _dict['admin_delete_enabled'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateOrganizationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "public_metadata": obj.get("public_metadata"),
            "private_metadata": obj.get("private_metadata"),
            "name": obj.get("name"),
            "slug": obj.get("slug"),
            "max_allowed_memberships": obj.get("max_allowed_memberships"),
            "admin_delete_enabled": obj.get("admin_delete_enabled"),
            "created_at": obj.get("created_at")
        })
        return _obj


