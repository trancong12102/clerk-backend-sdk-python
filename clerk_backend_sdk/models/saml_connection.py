# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

    The version of the OpenAPI document: v1
    Contact: support@clerk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from clerk_backend_sdk.models.saml_connection_attribute_mapping import SAMLConnectionAttributeMapping
from typing import Optional, Set
from typing_extensions import Self

class SAMLConnection(BaseModel):
    """
    SAMLConnection
    """ # noqa: E501
    object: StrictStr
    id: StrictStr
    name: StrictStr
    domain: StrictStr
    idp_entity_id: Optional[StrictStr]
    idp_sso_url: Optional[StrictStr]
    idp_certificate: Optional[StrictStr]
    idp_metadata_url: Optional[StrictStr] = None
    idp_metadata: Optional[StrictStr] = None
    acs_url: StrictStr
    sp_entity_id: StrictStr
    sp_metadata_url: StrictStr
    attribute_mapping: Optional[SAMLConnectionAttributeMapping] = None
    active: StrictBool
    provider: StrictStr
    user_count: StrictInt
    sync_user_attributes: StrictBool
    allow_subdomains: Optional[StrictBool] = None
    allow_idp_initiated: Optional[StrictBool] = None
    created_at: StrictInt = Field(description="Unix timestamp of creation. ")
    updated_at: StrictInt = Field(description="Unix timestamp of last update. ")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["object", "id", "name", "domain", "idp_entity_id", "idp_sso_url", "idp_certificate", "idp_metadata_url", "idp_metadata", "acs_url", "sp_entity_id", "sp_metadata_url", "attribute_mapping", "active", "provider", "user_count", "sync_user_attributes", "allow_subdomains", "allow_idp_initiated", "created_at", "updated_at"]

    @field_validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['saml_connection']):
            raise ValueError("must be one of enum values ('saml_connection')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SAMLConnection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attribute_mapping
        if self.attribute_mapping:
            _dict['attribute_mapping'] = self.attribute_mapping.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if idp_entity_id (nullable) is None
        # and model_fields_set contains the field
        if self.idp_entity_id is None and "idp_entity_id" in self.model_fields_set:
            _dict['idp_entity_id'] = None

        # set to None if idp_sso_url (nullable) is None
        # and model_fields_set contains the field
        if self.idp_sso_url is None and "idp_sso_url" in self.model_fields_set:
            _dict['idp_sso_url'] = None

        # set to None if idp_certificate (nullable) is None
        # and model_fields_set contains the field
        if self.idp_certificate is None and "idp_certificate" in self.model_fields_set:
            _dict['idp_certificate'] = None

        # set to None if idp_metadata_url (nullable) is None
        # and model_fields_set contains the field
        if self.idp_metadata_url is None and "idp_metadata_url" in self.model_fields_set:
            _dict['idp_metadata_url'] = None

        # set to None if idp_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.idp_metadata is None and "idp_metadata" in self.model_fields_set:
            _dict['idp_metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SAMLConnection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "object": obj.get("object"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "domain": obj.get("domain"),
            "idp_entity_id": obj.get("idp_entity_id"),
            "idp_sso_url": obj.get("idp_sso_url"),
            "idp_certificate": obj.get("idp_certificate"),
            "idp_metadata_url": obj.get("idp_metadata_url"),
            "idp_metadata": obj.get("idp_metadata"),
            "acs_url": obj.get("acs_url"),
            "sp_entity_id": obj.get("sp_entity_id"),
            "sp_metadata_url": obj.get("sp_metadata_url"),
            "attribute_mapping": SAMLConnectionAttributeMapping.from_dict(obj["attribute_mapping"]) if obj.get("attribute_mapping") is not None else None,
            "active": obj.get("active"),
            "provider": obj.get("provider"),
            "user_count": obj.get("user_count"),
            "sync_user_attributes": obj.get("sync_user_attributes"),
            "allow_subdomains": obj.get("allow_subdomains"),
            "allow_idp_initiated": obj.get("allow_idp_initiated"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


