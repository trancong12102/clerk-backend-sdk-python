# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

    The version of the OpenAPI document: v1
    Contact: support@clerk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateInstanceAuthConfigRequest(BaseModel):
    """
    UpdateInstanceAuthConfigRequest
    """ # noqa: E501
    restricted_to_allowlist: Optional[StrictBool] = Field(default=False, description="Whether sign up is restricted to email addresses, phone numbers and usernames that are on the allowlist.")
    from_email_address: Optional[StrictStr] = Field(default=None, description="The local part of the email address from which authentication-related emails (e.g. OTP code, magic links) will be sent. Only alphanumeric values are allowed. Note that this value should contain only the local part of the address (e.g. `foo` for `foo@example.com`).")
    progressive_sign_up: Optional[StrictBool] = Field(default=None, description="Enable the Progressive Sign Up algorithm. Refer to the [docs](https://clerk.com/docs/upgrade-guides/progressive-sign-up) for more info.")
    session_token_template: Optional[StrictStr] = Field(default=None, description="The name of the JWT Template used to augment your session tokens. To disable this, pass an empty string.")
    enhanced_email_deliverability: Optional[StrictBool] = Field(default=None, description="The \"enhanced_email_deliverability\" feature will send emails from \"verifications@clerk.dev\" instead of your domain. This can be helpful if you do not have a high domain reputation.")
    test_mode: Optional[StrictBool] = Field(default=None, description="Toggles test mode for this instance, allowing the use of test email addresses and phone numbers. Defaults to true for development instances.")
    __properties: ClassVar[List[str]] = ["restricted_to_allowlist", "from_email_address", "progressive_sign_up", "session_token_template", "enhanced_email_deliverability", "test_mode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateInstanceAuthConfigRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if restricted_to_allowlist (nullable) is None
        # and model_fields_set contains the field
        if self.restricted_to_allowlist is None and "restricted_to_allowlist" in self.model_fields_set:
            _dict['restricted_to_allowlist'] = None

        # set to None if from_email_address (nullable) is None
        # and model_fields_set contains the field
        if self.from_email_address is None and "from_email_address" in self.model_fields_set:
            _dict['from_email_address'] = None

        # set to None if progressive_sign_up (nullable) is None
        # and model_fields_set contains the field
        if self.progressive_sign_up is None and "progressive_sign_up" in self.model_fields_set:
            _dict['progressive_sign_up'] = None

        # set to None if session_token_template (nullable) is None
        # and model_fields_set contains the field
        if self.session_token_template is None and "session_token_template" in self.model_fields_set:
            _dict['session_token_template'] = None

        # set to None if enhanced_email_deliverability (nullable) is None
        # and model_fields_set contains the field
        if self.enhanced_email_deliverability is None and "enhanced_email_deliverability" in self.model_fields_set:
            _dict['enhanced_email_deliverability'] = None

        # set to None if test_mode (nullable) is None
        # and model_fields_set contains the field
        if self.test_mode is None and "test_mode" in self.model_fields_set:
            _dict['test_mode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateInstanceAuthConfigRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "restricted_to_allowlist": obj.get("restricted_to_allowlist") if obj.get("restricted_to_allowlist") is not None else False,
            "from_email_address": obj.get("from_email_address"),
            "progressive_sign_up": obj.get("progressive_sign_up"),
            "session_token_template": obj.get("session_token_template"),
            "enhanced_email_deliverability": obj.get("enhanced_email_deliverability"),
            "test_mode": obj.get("test_mode")
        })
        return _obj


