# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

    The version of the OpenAPI document: v1
    Contact: support@clerk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from clerk_backend_sdk.models.password_hasher import PasswordHasher
from typing import Optional, Set
from typing_extensions import Self

class CreateUserRequest(BaseModel):
    """
    CreateUserRequest
    """ # noqa: E501
    external_id: Optional[StrictStr] = Field(default=None, description="The ID of the user as used in your external systems or your previous authentication solution. Must be unique across your instance.")
    first_name: Optional[StrictStr] = Field(default=None, description="The first name to assign to the user")
    last_name: Optional[StrictStr] = Field(default=None, description="The last name to assign to the user")
    email_address: Optional[List[StrictStr]] = Field(default=None, description="Email addresses to add to the user. Must be unique across your instance. The first email address will be set as the user's primary email address.")
    phone_number: Optional[List[StrictStr]] = Field(default=None, description="Phone numbers to add to the user. Must be unique across your instance. The first phone number will be set as the user's primary phone number.")
    web3_wallet: Optional[List[StrictStr]] = Field(default=None, description="Web3 wallets to add to the user. Must be unique across your instance. The first wallet will be set as the user's primary wallet.")
    username: Optional[StrictStr] = Field(default=None, description="The username to give to the user. It must be unique across your instance.")
    password: Optional[StrictStr] = Field(default=None, description="The plaintext password to give the user. Must be at least 8 characters long, and can not be in any list of hacked passwords.")
    password_digest: Optional[StrictStr] = Field(default=None, description="In case you already have the password digests and not the passwords, you can use them for the newly created user via this property. The digests should be generated with one of the supported algorithms. The hashing algorithm can be specified using the `password_hasher` property.")
    password_hasher: Optional[PasswordHasher] = None
    skip_password_checks: Optional[StrictBool] = Field(default=None, description="When set to `true` all password checks are skipped. It is recommended to use this method only when migrating plaintext passwords to Clerk. Upon migration the user base should be prompted to pick stronger password.")
    skip_password_requirement: Optional[StrictBool] = Field(default=None, description="When set to `true`, `password` is not required anymore when creating the user and can be omitted. This is useful when you are trying to create a user that doesn't have a password, in an instance that is using passwords. Please note that you cannot use this flag if password is the only way for a user to sign into your instance.")
    totp_secret: Optional[StrictStr] = Field(default=None, description="In case TOTP is configured on the instance, you can provide the secret to enable it on the newly created user without the need to reset it. Please note that currently the supported options are: * Period: 30 seconds * Code length: 6 digits * Algorithm: SHA1")
    backup_codes: Optional[List[StrictStr]] = Field(default=None, description="If Backup Codes are configured on the instance, you can provide them to enable it on the newly created user without the need to reset them. You must provide the backup codes in plain format or the corresponding bcrypt digest.")
    public_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Metadata saved on the user, that is visible to both your Frontend and Backend APIs")
    private_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Metadata saved on the user, that is only visible to your Backend API")
    unsafe_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Metadata saved on the user, that can be updated from both the Frontend and Backend APIs. Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.")
    delete_self_enabled: Optional[StrictBool] = Field(default=None, description="If enabled, user can delete themselves via FAPI. ")
    create_organization_enabled: Optional[StrictBool] = Field(default=None, description="If enabled, user can create organizations via FAPI. ")
    create_organizations_limit: Optional[StrictInt] = Field(default=None, description="The maximum number of organizations the user can create. 0 means unlimited. ")
    created_at: Optional[StrictStr] = Field(default=None, description="A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).")
    __properties: ClassVar[List[str]] = ["external_id", "first_name", "last_name", "email_address", "phone_number", "web3_wallet", "username", "password", "password_digest", "password_hasher", "skip_password_checks", "skip_password_requirement", "totp_secret", "backup_codes", "public_metadata", "private_metadata", "unsafe_metadata", "delete_self_enabled", "create_organization_enabled", "create_organizations_limit", "created_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateUserRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['external_id'] = None

        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['first_name'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['last_name'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if delete_self_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.delete_self_enabled is None and "delete_self_enabled" in self.model_fields_set:
            _dict['delete_self_enabled'] = None

        # set to None if create_organization_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.create_organization_enabled is None and "create_organization_enabled" in self.model_fields_set:
            _dict['create_organization_enabled'] = None

        # set to None if create_organizations_limit (nullable) is None
        # and model_fields_set contains the field
        if self.create_organizations_limit is None and "create_organizations_limit" in self.model_fields_set:
            _dict['create_organizations_limit'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateUserRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "external_id": obj.get("external_id"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "email_address": obj.get("email_address"),
            "phone_number": obj.get("phone_number"),
            "web3_wallet": obj.get("web3_wallet"),
            "username": obj.get("username"),
            "password": obj.get("password"),
            "password_digest": obj.get("password_digest"),
            "password_hasher": obj.get("password_hasher"),
            "skip_password_checks": obj.get("skip_password_checks"),
            "skip_password_requirement": obj.get("skip_password_requirement"),
            "totp_secret": obj.get("totp_secret"),
            "backup_codes": obj.get("backup_codes"),
            "public_metadata": obj.get("public_metadata"),
            "private_metadata": obj.get("private_metadata"),
            "unsafe_metadata": obj.get("unsafe_metadata"),
            "delete_self_enabled": obj.get("delete_self_enabled"),
            "create_organization_enabled": obj.get("create_organization_enabled"),
            "create_organizations_limit": obj.get("create_organizations_limit"),
            "created_at": obj.get("created_at")
        })
        return _obj


