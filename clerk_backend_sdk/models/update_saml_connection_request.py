# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

    The version of the OpenAPI document: v1
    Contact: support@clerk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, Optional
from clerk_backend_sdk.models.update_saml_connection_request_attribute_mapping import UpdateSAMLConnectionRequestAttributeMapping
from typing import Optional, Set
from typing_extensions import Self

class UpdateSAMLConnectionRequest(BaseModel):
    """
    UpdateSAMLConnectionRequest
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the new SAML Connection")
    domain: Optional[StrictStr] = Field(default=None, description="The domain to use for the new SAML Connection")
    idp_entity_id: Optional[StrictStr] = Field(default=None, description="The entity id as provided by the IdP")
    idp_sso_url: Optional[StrictStr] = Field(default=None, description="The SSO url as provided by the IdP")
    idp_certificate: Optional[StrictStr] = Field(default=None, description="The x509 certificated as provided by the IdP")
    idp_metadata_url: Optional[StrictStr] = Field(default=None, description="The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties and replaces them")
    idp_metadata: Optional[StrictStr] = Field(default=None, description="The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties")
    attribute_mapping: Optional[UpdateSAMLConnectionRequestAttributeMapping] = None
    active: Optional[StrictBool] = Field(default=None, description="Activate or de-activate the SAML Connection")
    sync_user_attributes: Optional[StrictBool] = Field(default=None, description="Controls whether to update the user's attributes in each sign-in")
    allow_subdomains: Optional[StrictBool] = Field(default=None, description="Allow users with an email address subdomain to use this connection in order to authenticate")
    allow_idp_initiated: Optional[StrictBool] = Field(default=None, description="Enable or deactivate IdP-initiated flows")
    __properties: ClassVar[List[str]] = ["name", "domain", "idp_entity_id", "idp_sso_url", "idp_certificate", "idp_metadata_url", "idp_metadata", "attribute_mapping", "active", "sync_user_attributes", "allow_subdomains", "allow_idp_initiated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateSAMLConnectionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attribute_mapping
        if self.attribute_mapping:
            _dict['attribute_mapping'] = self.attribute_mapping.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if idp_entity_id (nullable) is None
        # and model_fields_set contains the field
        if self.idp_entity_id is None and "idp_entity_id" in self.model_fields_set:
            _dict['idp_entity_id'] = None

        # set to None if idp_sso_url (nullable) is None
        # and model_fields_set contains the field
        if self.idp_sso_url is None and "idp_sso_url" in self.model_fields_set:
            _dict['idp_sso_url'] = None

        # set to None if idp_certificate (nullable) is None
        # and model_fields_set contains the field
        if self.idp_certificate is None and "idp_certificate" in self.model_fields_set:
            _dict['idp_certificate'] = None

        # set to None if idp_metadata_url (nullable) is None
        # and model_fields_set contains the field
        if self.idp_metadata_url is None and "idp_metadata_url" in self.model_fields_set:
            _dict['idp_metadata_url'] = None

        # set to None if idp_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.idp_metadata is None and "idp_metadata" in self.model_fields_set:
            _dict['idp_metadata'] = None

        # set to None if attribute_mapping (nullable) is None
        # and model_fields_set contains the field
        if self.attribute_mapping is None and "attribute_mapping" in self.model_fields_set:
            _dict['attribute_mapping'] = None

        # set to None if active (nullable) is None
        # and model_fields_set contains the field
        if self.active is None and "active" in self.model_fields_set:
            _dict['active'] = None

        # set to None if sync_user_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.sync_user_attributes is None and "sync_user_attributes" in self.model_fields_set:
            _dict['sync_user_attributes'] = None

        # set to None if allow_subdomains (nullable) is None
        # and model_fields_set contains the field
        if self.allow_subdomains is None and "allow_subdomains" in self.model_fields_set:
            _dict['allow_subdomains'] = None

        # set to None if allow_idp_initiated (nullable) is None
        # and model_fields_set contains the field
        if self.allow_idp_initiated is None and "allow_idp_initiated" in self.model_fields_set:
            _dict['allow_idp_initiated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateSAMLConnectionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "domain": obj.get("domain"),
            "idp_entity_id": obj.get("idp_entity_id"),
            "idp_sso_url": obj.get("idp_sso_url"),
            "idp_certificate": obj.get("idp_certificate"),
            "idp_metadata_url": obj.get("idp_metadata_url"),
            "idp_metadata": obj.get("idp_metadata"),
            "attribute_mapping": UpdateSAMLConnectionRequestAttributeMapping.from_dict(obj["attribute_mapping"]) if obj.get("attribute_mapping") is not None else None,
            "active": obj.get("active"),
            "sync_user_attributes": obj.get("sync_user_attributes"),
            "allow_subdomains": obj.get("allow_subdomains"),
            "allow_idp_initiated": obj.get("allow_idp_initiated")
        })
        return _obj


