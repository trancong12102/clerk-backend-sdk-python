# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

    The version of the OpenAPI document: v1
    Contact: support@clerk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from clerk_backend_sdk.models.user import User

class TestUser(unittest.TestCase):
    """User unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> User:
        """Test User
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `User`
        """
        model = User()
        if include_optional:
            return User(
                id = '',
                object = 'user',
                external_id = '',
                primary_email_address_id = '',
                primary_phone_number_id = '',
                primary_web3_wallet_id = '',
                username = '',
                first_name = '',
                last_name = '',
                profile_image_url = '',
                image_url = '',
                has_image = True,
                public_metadata = None,
                private_metadata = None,
                unsafe_metadata = None,
                email_addresses = [
                    clerk_backend_sdk.models.email_address.EmailAddress(
                        id = '', 
                        object = 'email_address', 
                        email_address = '', 
                        reserved = True, 
                        verification = clerk_backend_sdk.models.email_address_verification.EmailAddress_verification(), 
                        linked_to = [
                            clerk_backend_sdk.models.identification_link.IdentificationLink(
                                type = 'oauth_google', 
                                id = '', )
                            ], 
                        created_at = 56, 
                        updated_at = 56, )
                    ],
                phone_numbers = [
                    clerk_backend_sdk.models.phone_number.PhoneNumber(
                        id = '', 
                        object = 'phone_number', 
                        phone_number = '', 
                        reserved_for_second_factor = True, 
                        default_second_factor = True, 
                        reserved = True, 
                        verification = clerk_backend_sdk.models.phone_number_verification.PhoneNumber_verification(), 
                        linked_to = [
                            clerk_backend_sdk.models.identification_link.IdentificationLink(
                                type = 'oauth_google', 
                                id = '', )
                            ], 
                        backup_codes = [
                            ''
                            ], 
                        created_at = 56, 
                        updated_at = 56, )
                    ],
                web3_wallets = [
                    clerk_backend_sdk.models.web3_wallet.Web3Wallet(
                        id = '', 
                        object = 'web3_wallet', 
                        web3_wallet = '', 
                        verification = clerk_backend_sdk.models.web3_wallet_verification.Web3Wallet_verification(), 
                        created_at = 56, 
                        updated_at = 56, )
                    ],
                passkeys = [
                    clerk_backend_sdk.models.schemas_passkey.schemas-Passkey(
                        id = '', 
                        object = 'passkey', 
                        name = '', 
                        last_used_at = 56, 
                        verification = clerk_backend_sdk.models.schemas_passkey_verification.schemas_Passkey_verification(), )
                    ],
                password_enabled = True,
                two_factor_enabled = True,
                totp_enabled = True,
                backup_code_enabled = True,
                mfa_enabled_at = 56,
                mfa_disabled_at = 56,
                external_accounts = [
                    None
                    ],
                saml_accounts = [
                    clerk_backend_sdk.models.saml_account.SAMLAccount(
                        id = '', 
                        object = 'saml_account', 
                        provider = '', 
                        active = True, 
                        email_address = '', 
                        first_name = '', 
                        last_name = '', 
                        provider_user_id = '', 
                        public_metadata = clerk_backend_sdk.models.public_metadata.public_metadata(), 
                        verification = clerk_backend_sdk.models.saml_account_verification.SAMLAccount_verification(), )
                    ],
                last_sign_in_at = 56,
                banned = True,
                locked = True,
                lockout_expires_in_seconds = 56,
                verification_attempts_remaining = 56,
                updated_at = 56,
                created_at = 56,
                delete_self_enabled = True,
                create_organization_enabled = True,
                create_organizations_limit = 56,
                last_active_at = 1700690400000
            )
        else:
            return User(
        )
        """

    def testUser(self):
        """Test User"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
