# coding: utf-8

"""
    Clerk Backend API

    The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).   Please see https://clerk.com/docs for more information.

    The version of the OpenAPI document: v1
    Contact: support@clerk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from clerk_backend_sdk.models.saml_connections import SAMLConnections

class TestSAMLConnections(unittest.TestCase):
    """SAMLConnections unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SAMLConnections:
        """Test SAMLConnections
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SAMLConnections`
        """
        model = SAMLConnections()
        if include_optional:
            return SAMLConnections(
                data = [
                    clerk_backend_sdk.models.saml_connection.SAMLConnection(
                        object = 'saml_connection', 
                        id = '', 
                        name = '', 
                        domain = '', 
                        idp_entity_id = '', 
                        idp_sso_url = '', 
                        idp_certificate = '', 
                        idp_metadata_url = '', 
                        idp_metadata = '', 
                        acs_url = '', 
                        sp_entity_id = '', 
                        sp_metadata_url = '', 
                        attribute_mapping = clerk_backend_sdk.models.saml_connection_attribute_mapping.SAMLConnection_attribute_mapping(
                            user_id = '', 
                            email_address = '', 
                            first_name = '', 
                            last_name = '', ), 
                        active = True, 
                        provider = '', 
                        user_count = 56, 
                        sync_user_attributes = True, 
                        allow_subdomains = True, 
                        allow_idp_initiated = True, 
                        created_at = 56, 
                        updated_at = 56, )
                    ],
                total_count = 56
            )
        else:
            return SAMLConnections(
                data = [
                    clerk_backend_sdk.models.saml_connection.SAMLConnection(
                        object = 'saml_connection', 
                        id = '', 
                        name = '', 
                        domain = '', 
                        idp_entity_id = '', 
                        idp_sso_url = '', 
                        idp_certificate = '', 
                        idp_metadata_url = '', 
                        idp_metadata = '', 
                        acs_url = '', 
                        sp_entity_id = '', 
                        sp_metadata_url = '', 
                        attribute_mapping = clerk_backend_sdk.models.saml_connection_attribute_mapping.SAMLConnection_attribute_mapping(
                            user_id = '', 
                            email_address = '', 
                            first_name = '', 
                            last_name = '', ), 
                        active = True, 
                        provider = '', 
                        user_count = 56, 
                        sync_user_attributes = True, 
                        allow_subdomains = True, 
                        allow_idp_initiated = True, 
                        created_at = 56, 
                        updated_at = 56, )
                    ],
                total_count = 56,
        )
        """

    def testSAMLConnections(self):
        """Test SAMLConnections"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
